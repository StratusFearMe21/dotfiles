// This code was autogenerated with `dbus-codegen-rust -g -m None -d org.mpris.MediaPlayer2.playerctld -p /org/mpris/MediaPlayer2`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusProperties {
    fn get<R0: for<'b> arg::Get<'b> + 'static>(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<R0, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set<I2: arg::Arg + arg::Append>(
        &self,
        interface_name: &str,
        property_name: &str,
        value: I2,
    ) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusProperties
    for blocking::Proxy<'a, C>
{
    fn get<R0: for<'b> arg::Get<'b> + 'static>(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<R0, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface_name, property_name),
        )
        .and_then(|r: (arg::Variant<R0>,)| Ok((r.0).0))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "GetAll",
            (interface_name,),
        )
        .and_then(|r: (arg::PropMap,)| Ok(r.0))
    }

    fn set<I2: arg::Arg + arg::Append>(
        &self,
        interface_name: &str,
        property_name: &str,
        value: I2,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface_name, property_name, arg::Variant(value)),
        )
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusPeer
    for blocking::Proxy<'a, C>
{
    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgMprisMediaPlayer2 {
    fn raise(&self) -> Result<(), dbus::Error>;
    fn quit(&self) -> Result<(), dbus::Error>;
    fn can_quit(&self) -> Result<bool, dbus::Error>;
    fn fullscreen(&self) -> Result<bool, dbus::Error>;
    fn set_fullscreen(&self, value: bool) -> Result<(), dbus::Error>;
    fn can_set_fullscreen(&self) -> Result<bool, dbus::Error>;
    fn can_raise(&self) -> Result<bool, dbus::Error>;
    fn has_track_list(&self) -> Result<bool, dbus::Error>;
    fn identity(&self) -> Result<String, dbus::Error>;
    fn desktop_entry(&self) -> Result<String, dbus::Error>;
    fn supported_uri_schemes(&self) -> Result<Vec<String>, dbus::Error>;
    fn supported_mime_types(&self) -> Result<Vec<String>, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgMprisMediaPlayer2
    for blocking::Proxy<'a, C>
{
    fn raise(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2", "Raise", ())
    }

    fn quit(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2", "Quit", ())
    }

    fn can_quit(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "CanQuit",
        )
    }

    fn fullscreen(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "Fullscreen",
        )
    }

    fn can_set_fullscreen(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "CanSetFullscreen",
        )
    }

    fn can_raise(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "CanRaise",
        )
    }

    fn has_track_list(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "HasTrackList",
        )
    }

    fn identity(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "Identity",
        )
    }

    fn desktop_entry(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "DesktopEntry",
        )
    }

    fn supported_uri_schemes(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "SupportedUriSchemes",
        )
    }

    fn supported_mime_types(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2",
            "SupportedMimeTypes",
        )
    }

    fn set_fullscreen(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.mpris.MediaPlayer2",
            "Fullscreen",
            value,
        )
    }
}

pub trait ComGithubAltdesktopPlayerctld {
    fn shift(&self) -> Result<String, dbus::Error>;
    fn unshift(&self) -> Result<String, dbus::Error>;
    fn player_names(&self) -> Result<Vec<String>, dbus::Error>;
}

#[derive(Debug)]
pub struct ComGithubAltdesktopPlayerctldActivePlayerChangeBegin {
    pub name: String,
}

impl arg::AppendAll for ComGithubAltdesktopPlayerctldActivePlayerChangeBegin {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.name, i);
    }
}

impl arg::ReadAll for ComGithubAltdesktopPlayerctldActivePlayerChangeBegin {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComGithubAltdesktopPlayerctldActivePlayerChangeBegin { name: i.read()? })
    }
}

impl dbus::message::SignalArgs for ComGithubAltdesktopPlayerctldActivePlayerChangeBegin {
    const NAME: &'static str = "ActivePlayerChangeBegin";
    const INTERFACE: &'static str = "com.github.altdesktop.playerctld";
}

#[derive(Debug)]
pub struct ComGithubAltdesktopPlayerctldActivePlayerChangeEnd {
    pub name: String,
}

impl arg::AppendAll for ComGithubAltdesktopPlayerctldActivePlayerChangeEnd {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.name, i);
    }
}

impl arg::ReadAll for ComGithubAltdesktopPlayerctldActivePlayerChangeEnd {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComGithubAltdesktopPlayerctldActivePlayerChangeEnd { name: i.read()? })
    }
}

impl dbus::message::SignalArgs for ComGithubAltdesktopPlayerctldActivePlayerChangeEnd {
    const NAME: &'static str = "ActivePlayerChangeEnd";
    const INTERFACE: &'static str = "com.github.altdesktop.playerctld";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    ComGithubAltdesktopPlayerctld for blocking::Proxy<'a, C>
{
    fn shift(&self) -> Result<String, dbus::Error> {
        self.method_call("com.github.altdesktop.playerctld", "Shift", ())
            .and_then(|r: (String,)| Ok(r.0))
    }

    fn unshift(&self) -> Result<String, dbus::Error> {
        self.method_call("com.github.altdesktop.playerctld", "Unshift", ())
            .and_then(|r: (String,)| Ok(r.0))
    }

    fn player_names(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.github.altdesktop.playerctld",
            "PlayerNames",
        )
    }
}

pub trait OrgMprisMediaPlayer2Playlists {
    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), dbus::Error>;
    fn get_playlists(
        &self,
        index: u32,
        max_count: u32,
        order: &str,
        reverse_order: bool,
    ) -> Result<Vec<(dbus::Path<'static>, String, String)>, dbus::Error>;
    fn playlist_count(&self) -> Result<u32, dbus::Error>;
    fn orderings(&self) -> Result<Vec<String>, dbus::Error>;
    fn active_playlist(&self)
        -> Result<(bool, (dbus::Path<'static>, String, String)), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    pub playlist: (dbus::Path<'static>, String, String),
}

impl arg::AppendAll for OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.playlist, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
            playlist: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    const NAME: &'static str = "PlaylistChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Playlists";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgMprisMediaPlayer2Playlists for blocking::Proxy<'a, C>
{
    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.Playlists",
            "ActivatePlaylist",
            (playlist_id,),
        )
    }

    fn get_playlists(
        &self,
        index: u32,
        max_count: u32,
        order: &str,
        reverse_order: bool,
    ) -> Result<Vec<(dbus::Path<'static>, String, String)>, dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.Playlists",
            "GetPlaylists",
            (index, max_count, order, reverse_order),
        )
        .and_then(|r: (Vec<(dbus::Path<'static>, String, String)>,)| Ok(r.0))
    }

    fn playlist_count(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Playlists",
            "PlaylistCount",
        )
    }

    fn orderings(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Playlists",
            "Orderings",
        )
    }

    fn active_playlist(
        &self,
    ) -> Result<(bool, (dbus::Path<'static>, String, String)), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Playlists",
            "ActivePlaylist",
        )
    }
}

pub trait OrgMprisMediaPlayer2Player {
    fn next(&self) -> Result<(), dbus::Error>;
    fn previous(&self) -> Result<(), dbus::Error>;
    fn pause(&self) -> Result<(), dbus::Error>;
    fn play_pause(&self) -> Result<(), dbus::Error>;
    fn stop(&self) -> Result<(), dbus::Error>;
    fn play(&self) -> Result<(), dbus::Error>;
    fn seek(&self, offset: i64) -> Result<(), dbus::Error>;
    fn set_position(&self, track_id: dbus::Path, offset: i64) -> Result<(), dbus::Error>;
    fn open_uri(&self, uri: &str) -> Result<(), dbus::Error>;
    fn playback_status(&self) -> Result<String, dbus::Error>;
    fn loop_status(&self) -> Result<String, dbus::Error>;
    fn set_loop_status(&self, value: String) -> Result<(), dbus::Error>;
    fn rate(&self) -> Result<f64, dbus::Error>;
    fn set_rate(&self, value: f64) -> Result<(), dbus::Error>;
    fn shuffle(&self) -> Result<bool, dbus::Error>;
    fn set_shuffle(&self, value: bool) -> Result<(), dbus::Error>;
    fn metadata(&self) -> Result<arg::PropMap, dbus::Error>;
    fn volume(&self) -> Result<f64, dbus::Error>;
    fn set_volume(&self, value: f64) -> Result<(), dbus::Error>;
    fn position(&self) -> Result<i64, dbus::Error>;
    fn minimum_rate(&self) -> Result<f64, dbus::Error>;
    fn maximum_rate(&self) -> Result<f64, dbus::Error>;
    fn can_go_next(&self) -> Result<bool, dbus::Error>;
    fn can_go_previous(&self) -> Result<bool, dbus::Error>;
    fn can_play(&self) -> Result<bool, dbus::Error>;
    fn can_pause(&self) -> Result<bool, dbus::Error>;
    fn can_seek(&self) -> Result<bool, dbus::Error>;
    fn can_control(&self) -> Result<bool, dbus::Error>;
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2PlayerSeeked {
    pub position: i64,
}

impl arg::AppendAll for OrgMprisMediaPlayer2PlayerSeeked {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.position, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2PlayerSeeked {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2PlayerSeeked {
            position: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2PlayerSeeked {
    const NAME: &'static str = "Seeked";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Player";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgMprisMediaPlayer2Player
    for blocking::Proxy<'a, C>
{
    fn next(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Next", ())
    }

    fn previous(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Previous", ())
    }

    fn pause(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Pause", ())
    }

    fn play_pause(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "PlayPause", ())
    }

    fn stop(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Stop", ())
    }

    fn play(&self) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Play", ())
    }

    fn seek(&self, offset: i64) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "Seek", (offset,))
    }

    fn set_position(&self, track_id: dbus::Path, offset: i64) -> Result<(), dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.Player",
            "SetPosition",
            (track_id, offset),
        )
    }

    fn open_uri(&self, uri: &str) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.Player", "OpenUri", (uri,))
    }

    fn playback_status(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "PlaybackStatus",
        )
    }

    fn loop_status(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "LoopStatus",
        )
    }

    fn rate(&self) -> Result<f64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Rate",
        )
    }

    fn shuffle(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Shuffle",
        )
    }

    fn metadata(&self) -> Result<arg::PropMap, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Metadata",
        )
    }

    fn volume(&self) -> Result<f64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Volume",
        )
    }

    fn position(&self) -> Result<i64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Position",
        )
    }

    fn minimum_rate(&self) -> Result<f64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "MinimumRate",
        )
    }

    fn maximum_rate(&self) -> Result<f64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "MaximumRate",
        )
    }

    fn can_go_next(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanGoNext",
        )
    }

    fn can_go_previous(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanGoPrevious",
        )
    }

    fn can_play(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanPlay",
        )
    }

    fn can_pause(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanPause",
        )
    }

    fn can_seek(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanSeek",
        )
    }

    fn can_control(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "CanControl",
        )
    }

    fn set_loop_status(&self, value: String) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "LoopStatus",
            value,
        )
    }

    fn set_rate(&self, value: f64) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Rate",
            value,
        )
    }

    fn set_shuffle(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Shuffle",
            value,
        )
    }

    fn set_volume(&self, value: f64) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.mpris.MediaPlayer2.Player",
            "Volume",
            value,
        )
    }
}

pub trait OrgMprisMediaPlayer2TrackList {
    fn get_tracks_metadata(
        &self,
        track_ids: Vec<dbus::Path>,
    ) -> Result<Vec<arg::PropMap>, dbus::Error>;
    fn add_track(
        &self,
        uri: &str,
        after_track: dbus::Path,
        set_as_current: bool,
    ) -> Result<(), dbus::Error>;
    fn remove_track(&self, track_id: dbus::Path) -> Result<(), dbus::Error>;
    fn go_to(&self, track_id: dbus::Path) -> Result<(), dbus::Error>;
    fn tracks(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error>;
    fn can_edit_tracks(&self) -> Result<bool, dbus::Error>;
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2TrackListTrackListReplaced {
    pub tracks: Vec<dbus::Path<'static>>,
    pub current_track: dbus::Path<'static>,
}

impl arg::AppendAll for OrgMprisMediaPlayer2TrackListTrackListReplaced {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.tracks, i);
        arg::RefArg::append(&self.current_track, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2TrackListTrackListReplaced {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2TrackListTrackListReplaced {
            tracks: i.read()?,
            current_track: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2TrackListTrackListReplaced {
    const NAME: &'static str = "TrackListReplaced";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2TrackListTrackAdded {
    pub metadata: arg::PropMap,
    pub after_track: dbus::Path<'static>,
}

impl arg::AppendAll for OrgMprisMediaPlayer2TrackListTrackAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.metadata, i);
        arg::RefArg::append(&self.after_track, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2TrackListTrackAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2TrackListTrackAdded {
            metadata: i.read()?,
            after_track: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2TrackListTrackAdded {
    const NAME: &'static str = "TrackAdded";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2TrackListTrackRemoved {
    pub track_id: dbus::Path<'static>,
}

impl arg::AppendAll for OrgMprisMediaPlayer2TrackListTrackRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.track_id, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2TrackListTrackRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2TrackListTrackRemoved {
            track_id: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2TrackListTrackRemoved {
    const NAME: &'static str = "TrackRemoved";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    pub track_id: dbus::Path<'static>,
    pub metadata: arg::PropMap,
}

impl arg::AppendAll for OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.track_id, i);
        arg::RefArg::append(&self.metadata, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
            track_id: i.read()?,
            metadata: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    const NAME: &'static str = "TrackMetadataChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgMprisMediaPlayer2TrackList for blocking::Proxy<'a, C>
{
    fn get_tracks_metadata(
        &self,
        track_ids: Vec<dbus::Path>,
    ) -> Result<Vec<arg::PropMap>, dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.TrackList",
            "GetTracksMetadata",
            (track_ids,),
        )
        .and_then(|r: (Vec<arg::PropMap>,)| Ok(r.0))
    }

    fn add_track(
        &self,
        uri: &str,
        after_track: dbus::Path,
        set_as_current: bool,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.TrackList",
            "AddTrack",
            (uri, after_track, set_as_current),
        )
    }

    fn remove_track(&self, track_id: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call(
            "org.mpris.MediaPlayer2.TrackList",
            "RemoveTrack",
            (track_id,),
        )
    }

    fn go_to(&self, track_id: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call("org.mpris.MediaPlayer2.TrackList", "GoTo", (track_id,))
    }

    fn tracks(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.TrackList",
            "Tracks",
        )
    }

    fn can_edit_tracks(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.mpris.MediaPlayer2.TrackList",
            "CanEditTracks",
        )
    }
}
